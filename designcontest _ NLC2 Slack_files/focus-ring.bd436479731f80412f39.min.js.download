webpackJsonp([84],{

/***/ 0:
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(src) {
	if (typeof execScript !== "undefined")
		execScript(src);
	else
		eval.call(null, src);
}


/***/ }),

/***/ 1249:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0)(__webpack_require__(1250))

/***/ }),

/***/ 1250:
/***/ (function(module, exports) {

module.exports = "(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * Module export\n *\n * @param {Element} el\n * @return {ClassList}\n */\n\nvar index = function (el) {\n  return new ClassList(el);\n};\n\n/**\n * Initialize a new ClassList for the given element\n *\n * @param {Element} el DOM Element\n */\nfunction ClassList(el) {\n  if (!el || el.nodeType !== 1) {\n    throw new Error('A DOM Element reference is required');\n  }\n\n  this.el = el;\n  this.classList = el.classList;\n}\n\n/**\n * Check token validity\n *\n * @param token\n * @param [method]\n */\nfunction checkToken(token, method) {\n  method = method || 'a method';\n\n  if (typeof token != 'string') {\n    throw new TypeError(\n      'Failed to execute \\'' + method + '\\' on \\'ClassList\\': ' +\n      'the token provided (\\'' + token + '\\') is not a string.'\n    );\n  }\n  if (token === \"\") {\n    throw new SyntaxError(\n      'Failed to execute \\'' + method + '\\' on \\'ClassList\\': ' +\n      'the token provided must not be empty.'\n    );\n  }\n  if (/\\s/.test(token)) {\n    throw new Error(\n      'Failed to execute \\'' + method + '\\' on \\'ClassList\\': ' +\n      'the token provided (\\'' + token + '\\') contains HTML space ' +\n      'characters, which are not valid in tokens.'\n    );\n  }\n}\n\n/**\n * Return an array of the class names on the element.\n *\n * @return {Array}\n */\nClassList.prototype.toArray = function () {\n  var str = (this.el.getAttribute('class') || '').replace(/^\\s+|\\s+$/g, '');\n  var classes = str.split(/\\s+/);\n  if ('' === classes[0]) { classes.shift(); }\n  return classes;\n};\n\n/**\n * Add the given `token` to the class list if it's not already present.\n *\n * @param {String} token\n */\nClassList.prototype.add = function (token) {\n  var classes, index, updated;\n  checkToken(token, 'add');\n\n  if (this.classList) {\n    this.classList.add(token);\n  }\n  else {\n    // fallback\n    classes = this.toArray();\n    index = classes.indexOf(token);\n    if (index === -1) {\n      classes.push(token);\n      this.el.setAttribute('class', classes.join(' '));\n    }\n  }\n\n  return;\n};\n\n/**\n * Check if the given `token` is in the class list.\n *\n * @param {String} token\n * @return {Boolean}\n */\nClassList.prototype.contains = function (token) {\n  checkToken(token, 'contains');\n\n  return this.classList ?\n    this.classList.contains(token) :\n    this.toArray().indexOf(token) > -1;\n};\n\n/**\n * Remove any class names that match the given `token`, when present.\n *\n * @param {String|RegExp} token\n */\nClassList.prototype.remove = function (token) {\n  var arr, classes, i, index, len;\n\n  if ('[object RegExp]' == Object.prototype.toString.call(token)) {\n    arr = this.toArray();\n    for (i = 0, len = arr.length; i < len; i++) {\n      if (token.test(arr[i])) {\n        this.remove(arr[i]);\n      }\n    }\n  }\n  else {\n    checkToken(token, 'remove');\n\n    if (this.classList) {\n      this.classList.remove(token);\n    }\n    else {\n      // fallback\n      classes = this.toArray();\n      index = classes.indexOf(token);\n      if (index > -1) {\n        classes.splice(index, 1);\n        this.el.setAttribute('class', classes.join(' '));\n      }\n    }\n  }\n\n  return;\n};\n\n/**\n * Toggle the `token` in the class list. Optionally force state via `force`.\n *\n * Native `classList` is not used as some browsers that support `classList` do\n * not support `force`. Avoiding `classList` altogether keeps this function\n * simple.\n *\n * @param {String} token\n * @param {Boolean} [force]\n * @return {Boolean}\n */\nClassList.prototype.toggle = function (token, force) {\n  checkToken(token, 'toggle');\n\n  var hasToken = this.contains(token);\n  var method = hasToken ? (force !== true && 'remove') : (force !== false && 'add');\n\n  if (method) {\n    this[method](token);\n  }\n\n  return (typeof force == 'boolean' ? force : !hasToken);\n};\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  var hadKeyboardEvent = false;\n  var elWithFocusRing;\n\n  var inputTypesWhitelist = {\n    'text': true,\n    'search': true,\n    'url': true,\n    'tel': true,\n    'email': true,\n    'password': true,\n    'number': true,\n    'date': true,\n    'month': true,\n    'week': true,\n    'time': true,\n    'datetime': true,\n    'datetime-local': true,\n  };\n\n  /**\n   * Computes whether the given element should automatically trigger the\n   * `focus-ring` class being added, i.e. whether it should always match\n   * `:focus-ring` when focused.\n   * @param {Element} el\n   * @return {boolean}\n   */\n  function focusTriggersKeyboardModality(el) {\n    var type = el.type;\n    var tagName = el.tagName;\n\n    if (tagName == 'INPUT' && inputTypesWhitelist[type] && !el.readonly)\n      return true;\n\n    if (tagName == 'TEXTAREA' && !el.readonly)\n      return true;\n\n    if (el.contentEditable == 'true')\n      return true;\n\n    return false;\n  }\n\n  /**\n   * Add the `focus-ring` class to the given element if it was not added by\n   * the author.\n   * @param {Element} el\n   */\n  function addFocusRingClass(el) {\n    if (index(el).contains('focus-ring'))\n      return;\n    index(el).add('focus-ring');\n    // Keep a reference to the element to which the focus-ring class is applied\n    // so the focus-ring class can be restored to it if the window regains\n    // focus after being blurred.\n    elWithFocusRing = el;\n  }\n\n  /**\n   * Remove the `focus-ring` class from the given element if it was not\n   * originally added by the author.\n   * @param {Element} el\n   */\n  function removeFocusRingClass(el) {\n    index(el).remove('focus-ring');\n  }\n\n  /**\n   * On `keydown`, set `hadKeyboardEvent`, add `focus-ring` class if the\n   * key was Tab.\n   * @param {Event} e\n   */\n  function onKeyDown(e) {\n    if (e.altKey || e.ctrlKey || e.metaKey)\n      return;\n\n    if (e.keyCode != 9)\n      return;\n\n    hadKeyboardEvent = true;\n  }\n\n  /**\n   * On `focus`, add the `focus-ring` class to the target if:\n   * - the target received focus as a result of keyboard navigation\n   * - the event target is an element that will likely require interaction\n   *   via the keyboard (e.g. a text box)\n   * @param {Event} e\n   */\n  function onFocus(e) {\n    if (e.target == document)\n      return;\n\n    if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n      addFocusRingClass(e.target);\n      hadKeyboardEvent = false;\n    }\n  }\n\n  /**\n   * On `blur`, remove the `focus-ring` class from the target.\n   * @param {Event} e\n   */\n  function onBlur(e) {\n    if (e.target == document)\n      return;\n\n    removeFocusRingClass(e.target);\n  }\n\n  /**\n   * When the window regains focus, restore the focus-ring class to the element\n   * to which it was previously applied.\n   */\n  function onWindowFocus() {\n    if (document.activeElement == elWithFocusRing)\n      addFocusRingClass(elWithFocusRing);\n  }\n\n  document.addEventListener('keydown', onKeyDown, true);\n  document.addEventListener('focus', onFocus, true);\n  document.addEventListener('blur', onBlur, true);\n  window.addEventListener('focus', onWindowFocus, true);\n});\n\n})));\n\n"

/***/ })

},[1249]);